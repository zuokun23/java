<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
    - 1.创建bean的三种方式
        - 第一种方式：使用默认的构造函数：在spring的配置文件中使用bean标签，使用id和class属性，且没有其他属性和标签时。此时类中没有默认构造函数，则对象无法创建。
            - java中如果在一个类中没有写明任何构造函数的,那么会存在一个无参的构造函数。
            - 但如果写明了一个有参的构造函数,那么无参的构造函数就不复存在了。
        - 第二种方式：(模拟一个工厂类，该类可能存在与jar包中的，以class而不是java方式呈现，我们无法通过修改源码的方式提供构造函数）
            使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器
        - 第三种方式：(模拟一个工厂类，该类可能存在与jar包中的，以class而不是java方式呈现，我们无法通过修改源码的方式提供构造函数）
            使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器
    - 2.bean对象的作用范围
        - bean标签的scope属性：
            - 作用：用于指定bean的作用范围
            - 取值：
                - singleton：单例的（默认）
                - prototype：多例的
                    - <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"></bean>
                - request：作用于web应用的请求范围
                - session：作用于web应用的会话范围
                - global-session：作用于集群环境的会话范围（全局会话范围），当不上集群环境时，它就是session
    - 3.bean对象的生命周期
        - 单例对象：当容器创建时对象出生
            - 活着：只要容器还在，对象一直活着
            - 死亡：容器销毁，对象消亡
            - 总结：单例对象的生命周期和容器相同
            - 未使用ac.close()关闭，不会调用destroy方法，因为main结束销毁线程占有一切内存，容器也被销毁，但此时还没有来得及调用销毁方法
            ，就消失了（close方法在子类中，不再父类中）
                - bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="singleton"
    init-method="init" destroy-method="destroy"></bean>
        - 多例对象：
            - 出生：当我们使用时创建
            - 活着：对象只要在使用过程中就一直活着
            - 死亡：当对象长时间不用，且没有别的对象引用时，由java垃圾回收器回收。容器不知道我们使用多久。
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

    <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->
    <!--
    <bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"
    init-method="init" destroy-method="destroy"></bean>
</beans>